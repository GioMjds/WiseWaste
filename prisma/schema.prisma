generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int              @id @default(autoincrement())
  name          String?
  email         String?          @unique
  emailVerified DateTime?
  image         String?
  // Custom fields
  password      String?
  role          RoleType         @default(resident)
  first_name    String?
  last_name     String?
  phone_number  String?          @unique
  address       String?
  profile_image String?
  created_at    DateTime         @default(now())
  // NextAuth relations
  accounts      Account[]
  sessions      Session[]
  // Your app relations (update as needed)
  complaints    Complaint[]
  notifications Notification[]
  requests      ServiceRequest[]
  waste_logs    WasteLog[]
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model WasteType {
  waste_type_id Int              @id @default(autoincrement())
  name          String
  description   String?
  requests      ServiceRequest[]
  waste_logs    WasteLog[]
}

model ServiceRequest {
  request_id     Int           @id @default(autoincrement())
  userId         Int
  waste_type_id  Int
  requested_date DateTime
  status         RequestStatus @default(pending)
  pickups        Pickup[]
  user           User          @relation(fields: [userId], references: [id])
  waste_type     WasteType     @relation(fields: [waste_type_id], references: [waste_type_id])
}

model Pickup {
  pickup_id       Int              @id @default(autoincrement())
  request_id      Int
  scheduled_date  DateTime
  route_id        Int?
  status          PickupStatus     @default(scheduled)
  updated_at      DateTime         @default(now())
  complaints      Complaint[]
  service_request ServiceRequest   @relation(fields: [request_id], references: [request_id])
  route           Route?           @relation(fields: [route_id], references: [route_id])
  routeAssignment RouteAssignment?
}

model Route {
  route_id        Int              @id @default(autoincrement())
  name            String
  description     String?
  created_at      DateTime         @default(now())
  pickups         Pickup[]
  routeAssignment RouteAssignment?
}

model RouteAssignment {
  assignment_id Int    @id @default(autoincrement())
  route_id      Int    @unique
  pickup_id     Int    @unique
  sequence_no   Int
  pickup        Pickup @relation(fields: [pickup_id], references: [pickup_id])
  route         Route  @relation(fields: [route_id], references: [route_id])
}

model Complaint {
  complaint_id Int             @id @default(autoincrement())
  userId       Int
  pickup_id    Int?
  description  String
  status       ComplaintStatus @default(open)
  created_at   DateTime        @default(now())
  updated_at   DateTime        @updatedAt
  pickup       Pickup?         @relation(fields: [pickup_id], references: [pickup_id])
  user         User            @relation(fields: [userId], references: [id])
}

model Notification {
  notification_id Int      @id @default(autoincrement())
  userId          Int
  title           String
  message         String
  sent_at         DateTime @default(now())
  is_read         Boolean  @default(false)
  user            User     @relation(fields: [userId], references: [id])
}

model WasteLog {
  log_id        Int       @id @default(autoincrement())
  userId        Int
  waste_type_id Int
  quantity_kg   Decimal   @db.Decimal(6, 2)
  log_date      DateTime
  created_at    DateTime  @default(now())
  user          User      @relation(fields: [userId], references: [id])
  waste_type    WasteType @relation(fields: [waste_type_id], references: [waste_type_id])
}

enum RequestStatus {
  pending
  scheduled
  completed
  cancelled
}

enum PickupStatus {
  scheduled
  in_progress
  done
  missed
}

enum ComplaintStatus {
  open
  in_review
  resolved
}

enum RoleType {
  admin
  resident
}
